;==========================================
; ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ И СТРУКТУРА ДАННЫХ
;==========================================
; Программа вычисляет сумму членов ряда Ak = 3*k-1 с заданным количеством членов
;
; Компиляция и сборка:
;   nasm -f elf 323.asm -o 323.o
;   gcc -m32 323.o -o 323
;
; Запуск: ./323
section .data
    intro_msg db "Программа вычисляет сумму членов ряда Ak = 3*k-1", 10, 0    ; Вступительное сообщение
    prompt_terms db "Введите количество членов ряда для вычисления: ", 0      ; Приглашение для ввода
    term_fmt db "Член A%d = %d", 10, 0    ; Формат для вывода каждого члена ряда
    result_msg db "Сумма первых %d членов = %d", 10, 0    ; Формат для вывода результата
    error_msg db "Ошибка: введите положительное число!", 10, 0    ; Сообщение об ошибке ввода
    format_in db "%d", 0    ; Формат для scanf - целое число

section .bss
    num_terms resd 1   ; Резервируем 4 байта для хранения количества членов ряда
    sum resd 1         ; Резервируем 4 байта для хранения суммы членов ряда

;==========================================
; ИСПОЛНЯЕМЫЙ КОД ПРОГРАММЫ
;==========================================
section .text
    global main    ; Объявление глобальной метки main - точки входа в программу
    extern printf  ; Импорт функции printf из стандартной библиотеки C
    extern scanf   ; Импорт функции scanf из стандартной библиотеки C
    
main:
    ;----------------------------------------
    ; БЛОК ПОДГОТОВКИ: Настройка стека и сохранение регистров
    ;----------------------------------------
    push ebp                ; Сохраняем указатель базы кадра стека
    mov ebp, esp           ; Устанавливаем новый указатель базы кадра стека
    sub esp, 8             ; Выделяем дополнительное пространство на стеке для локальных переменных
    
    ; Сохраняем регистры, которые будем изменять в программе
    push ebx               ; Сохраняем ebx (будет использоваться для временного хранения)
    push esi               ; Сохраняем esi (будет использоваться для счетчика k)
    push edi               ; Сохраняем edi (будет использоваться для временного хранения счетчика цикла)
    
    ;==========================================
    ; БЛОК ВЫВОДА ВСТУПИТЕЛЬНОГО СООБЩЕНИЯ
    ;==========================================
    push intro_msg         ; Помещаем адрес строки вступительного сообщения в стек
    call printf            ; Вызываем функцию printf для вывода сообщения
    add esp, 4             ; Очищаем стек после вызова функции (удаляем 1 параметр)
    
    ;==========================================
    ; БЛОК ВВОДА ДАННЫХ: Количество членов ряда
    ;==========================================
    ;----------------------------------------
    ; Подблок: Вывод приглашения для ввода
    ;----------------------------------------
    push prompt_terms      ; Помещаем адрес строки приглашения в стек
    call printf            ; Вызываем функцию printf для вывода приглашения
    add esp, 4             ; Очищаем стек после вызова функции
    
    ;----------------------------------------
    ; Подблок: Считывание количества членов ряда
    ;----------------------------------------
    push num_terms         ; Помещаем адрес переменной для хранения числа в стек
    push format_in         ; Помещаем формат ввода в стек
    call scanf             ; Вызываем функцию scanf для чтения ввода
    add esp, 8             ; Очищаем стек после вызова функции (удаляем 2 параметра)
    
    ;----------------------------------------
    ; Подблок: Проверка успешности ввода и валидации
    ;----------------------------------------
    cmp eax, 1             ; Сравниваем возвращаемое значение scanf с 1 (успешное чтение)
    jne input_error        ; Если не равно 1, переходим к обработке ошибки ввода
    
    ; Проверка, что введено положительное число
    cmp dword [num_terms], 0    ; Сравниваем введенное число с 0
    jle input_error             ; Если меньше или равно 0, переходим к обработке ошибки
    
    ; Ограничение максимального количества членов для безопасности
    cmp dword [num_terms], 1000 ; Сравниваем с максимально допустимым значением
    jle valid_input             ; Если меньше или равно 1000, ввод корректен
    mov dword [num_terms], 1000 ; Если больше 1000, ограничиваем до 1000
    
    ;==========================================
    ; БЛОК ВЫЧИСЛЕНИЙ: Расчет суммы членов ряда
    ;==========================================
valid_input:
    ; Инициализация
    mov ecx, [num_terms]   ; Счетчик цикла
    xor edx, edx           ; Накопитель суммы
    mov esi, 1             ; k начинается с 1
    
calculate_sum:
    ; Вычисление 3*k-1 используя LEA
    lea eax, [esi*2+esi]  ; eax = esi*3
    dec eax                ; eax = 3*k-1
    
    ; Накапливаем сумму в регистре
    add edx, eax
    
    ; Увеличиваем k
    inc esi
    
    ; Продолжаем цикл
    loop calculate_sum
    
    ; Сохраняем результат после цикла
    mov [sum], edx
    
    ;==========================================
    ; БЛОК ВЫВОДА РЕЗУЛЬТАТА
    ;==========================================
calculation_done:
    ;----------------------------------------
    ; Подблок: Вывод суммы членов ряда
    ;----------------------------------------
    push dword [sum]       ; Сумма членов ряда
    push dword [num_terms] ; Количество членов
    push result_msg        ; Формат сообщения о результате
    call printf            ; Вызываем функцию printf
    add esp, 12            ; Очищаем стек после вызова (удаляем 3 параметра)
    
    jmp exit_program       ; Переходим к завершению программы
    
    ;==========================================
    ; БЛОК ОБРАБОТКИ ОШИБОК
    ; Обрабатывает ошибки ввода
    ;==========================================
input_error:
    ;----------------------------------------
    ; Подблок: Вывод сообщения об ошибке
    ;----------------------------------------
    push error_msg         ; Помещаем адрес сообщения об ошибке в стек
    call printf            ; Вызываем функцию printf для вывода сообщения
    add esp, 4             ; Очищаем стек после вызова функции
    
    ;==========================================
    ; БЛОК ЗАВЕРШЕНИЯ ПРОГРАММЫ
    ; Корректно завершает программу с кодом выхода 0
    ;==========================================
exit_program:
    ;----------------------------------------
    ; Подблок: Восстановление регистров и стека
    ;----------------------------------------
    ; Восстанавливаем сохраненные регистры
    pop edi                ; Восстанавливаем edi
    pop esi                ; Восстанавливаем esi
    pop ebx                ; Восстанавливаем ebx
    
    ; Эпилог функции
    mov esp, ebp           ; Восстанавливаем указатель стека
    pop ebp                ; Восстанавливаем сохраненное значение базового указателя
    xor eax, eax           ; Устанавливаем код возврата 0 (успешное завершение)
    ret                    ; Возврат из программы
