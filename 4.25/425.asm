;==========================================
; ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ И СТРУКТУРА ДАННЫХ
;==========================================
; Программа вычисляет функцию f(x):
; Если -5 < x < 5, то y = x²
; В остальных случаях y = 7-x
;
; Компиляция и сборка:
;   nasm -f elf 425.asm -o 425.o
;   gcc -m32 425.o -o 425
;
; Запуск: ./425
section .data
    intro_msg db "Программа для вычисления функции f(x):", 10,
              db "Если -5 < x < 5, то y = x²", 10,
              db "В остальных случаях y = 7-x", 10, 0    ; Вступительное сообщение с описанием программы
    
    prompt_x db "Введите x: ", 0    ; Приглашение для ввода x
    
    result_case1 db "x находится в интервале (-5, 5). y = x² = %d", 10, 0    ; Формат для вывода результата в случае 1
    result_case2 db "x не находится в интервале (-5, 5). y = 7-x = %d", 10, 0    ; Формат для вывода результата в случае 2
    
    format_in db "%d", 0    ; Формат для scanf - целое число
    error_msg db "Ошибка: введено не число! Перезапустите программу.", 10, 0    ; Сообщение об ошибке ввода

section .bss
    x resd 1    ; Резервируем 4 байта для хранения переменной x
    y resd 1    ; Резервируем 4 байта для хранения результата вычисления

;==========================================
; ИСПОЛНЯЕМЫЙ КОД ПРОГРАММЫ
;==========================================
section .text
    global main    ; Объявление глобальной метки main - точки входа в программу
    extern printf  ; Импорт функции printf из стандартной библиотеки C
    extern scanf   ; Импорт функции scanf из стандартной библиотеки C
    
main:
    ;----------------------------------------
    ; БЛОК ПОДГОТОВКИ: Настройка стека
    ;----------------------------------------
    push ebp        ; Сохраняем указатель базы кадра стека
    mov ebp, esp    ; Устанавливаем новый указатель базы кадра стека
    
    ;==========================================
    ; БЛОК ВЫВОДА ВСТУПИТЕЛЬНОГО СООБЩЕНИЯ
    ;==========================================
    push intro_msg    ; Помещаем адрес строки вступительного сообщения в стек
    call printf       ; Вызываем функцию printf для вывода сообщения
    add esp, 4        ; Очищаем стек после вызова функции
    
    ;==========================================
    ; БЛОК ВВОДА ДАННЫХ
    ;==========================================
    ;----------------------------------------
    ; Подблок: Ввод значения x
    ;----------------------------------------
    push prompt_x     ; Помещаем адрес приглашения для x в стек
    call printf       ; Вызываем функцию printf для вывода приглашения
    add esp, 4        ; Очищаем стек после вызова функции
    
    push x            ; Помещаем адрес переменной x в стек
    push format_in    ; Помещаем формат ввода в стек
    call scanf        ; Вызываем функцию scanf для чтения ввода
    add esp, 8        ; Очищаем стек после вызова функции
    
    ; Проверка успешности ввода
    cmp eax, 1        ; Сравниваем возвращаемое значение scanf с 1 (успешное чтение)
    jne input_error   ; Если не равно 1, переходим к обработке ошибки ввода
    
    ;==========================================
    ; БЛОК ВЫЧИСЛЕНИЙ: Вычисление функции f(x)
    ;==========================================
    ;----------------------------------------
    ; Подблок: Проверка условия -5 < x < 5
    ;----------------------------------------
    mov eax, [x]      ; Загружаем значение x в eax
    cmp eax, -5       ; Сравниваем x с -5
    jle not_in_range  ; Если x <= -5, переходим к case2 (вне диапазона)
    
    cmp eax, 5        ; Сравниваем x с 5
    jge not_in_range  ; Если x >= 5, переходим к case2 (вне диапазона)
    
    ;----------------------------------------
    ; Подблок: Случай 1 (-5 < x < 5): y = x²
    ;----------------------------------------
    mov eax, [x]      ; Загружаем значение x в eax
    imul eax, eax     ; eax = x * x (умножение со знаком)
    mov [y], eax      ; Сохраняем результат y = x²
    
    ; Вывод результата для случая 1
    push dword [y]    ; Помещаем значение y в стек
    push result_case1 ; Помещаем формат сообщения в стек
    call printf       ; Вызываем функцию printf для вывода результата
    add esp, 8        ; Очищаем стек после вызова функции
    
    jmp end_program   ; Переходим к завершению программы
    
    ;----------------------------------------
    ; Подблок: Случай 2 (x ≤ -5 или x ≥ 5): y = 7-x
    ;----------------------------------------
not_in_range:
    mov eax, 7        ; Загружаем константу 7 в eax
    sub eax, [x]      ; eax = 7 - x
    mov [y], eax      ; Сохраняем результат y = 7 - x
    
    ; Вывод результата для случая 2
    push dword [y]    ; Помещаем значение y в стек
    push result_case2 ; Помещаем формат сообщения в стек
    call printf       ; Вызываем функцию printf для вывода результата
    add esp, 8        ; Очищаем стек после вызова функции
    
    ;==========================================
    ; БЛОК ЗАВЕРШЕНИЯ ПРОГРАММЫ
    ;==========================================
end_program:
    ; Эпилог функции
    mov esp, ebp      ; Восстанавливаем указатель стека
    pop ebp           ; Восстанавливаем сохраненное значение базового указателя
    xor eax, eax      ; Устанавливаем код возврата 0 (успешное завершение)
    ret               ; Возврат из программы

    ;==========================================
    ; БЛОК ОБРАБОТКИ ОШИБОК
    ; Обрабатывает ошибки ввода
    ;==========================================
input_error:
    ; Вывод сообщения об ошибке
    push error_msg    ; Помещаем адрес сообщения об ошибке в стек
    call printf       ; Вызываем функцию printf для вывода сообщения
    add esp, 4        ; Очищаем стек после вызова функции
    
    ; Эпилог функции с кодом ошибки
    mov esp, ebp      ; Восстанавливаем указатель стека
    pop ebp           ; Восстанавливаем сохраненное значение базового указателя
    mov eax, 1        ; Устанавливаем код возврата 1 (ошибка)
    ret               ; Возврат из программы
