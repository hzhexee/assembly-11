;==========================================
; ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ И СТРУКТУРА ДАННЫХ
;==========================================
; Программа обрабатывает три числа x, y, z по условию:
; Если x + y + z < 1, то z = 2 * (x - y)
; Иначе, наименьшее из x и y заменяется на 2 * (сумма двух других)
;
; Компиляция и сборка:
;   nasm -f elf 422.asm -o 422.o
;   gcc -m32 422.o -o 422
;
; Запуск: ./422
section .data
    intro_msg db "Программа для обработки трех чисел x, y, z по условию:", 10,
              db "Если x + y + z < 1, то z = 2 * (x - y)", 10,
              db "Иначе, наименьшее из x и y заменяется на 2 * (сумма двух других)", 10, 0
    
    prompt_x db "Введите x: ", 0    ; Приглашение для ввода x
    prompt_y db "Введите y: ", 0    ; Приглашение для ввода y
    prompt_z db "Введите z: ", 0    ; Приглашение для ввода z
    
    result_case1 db "Сумма меньше 1. Новое значение z = %d", 10, 0    ; Формат для вывода результата в случае 1
    result_case2_x db "Сумма больше или равна 1. x было наименьшим. Новое значение x = %d", 10, 0    ; Формат для вывода результата в случае 2 (x наименьшее)
    result_case2_y db "Сумма больше или равна 1. y было наименьшим. Новое значение y = %d", 10, 0    ; Формат для вывода результата в случае 2 (y наименьшее)
    
    final_values db "Итоговые значения: x = %d, y = %d, z = %d", 10, 0    ; Формат для вывода итоговых значений
    
    format_in db "%d", 0    ; Формат для scanf - целое число
    error_msg db "Ошибка: введено не число! Перезапустите программу.", 10, 0    ; Сообщение об ошибке ввода

section .bss
    x resd 1    ; Резервируем 4 байта для хранения переменной x
    y resd 1    ; Резервируем 4 байта для хранения переменной y
    z resd 1    ; Резервируем 4 байта для хранения переменной z

;==========================================
; ИСПОЛНЯЕМЫЙ КОД ПРОГРАММЫ
;==========================================
section .text
    global main    ; Объявление глобальной метки main - точки входа в программу
    extern printf  ; Импорт функции printf из стандартной библиотеки C
    extern scanf   ; Импорт функции scanf из стандартной библиотеки C
    
main:
    ;----------------------------------------
    ; БЛОК ПОДГОТОВКИ: Настройка стека
    ;----------------------------------------
    push ebp        ; Сохраняем указатель базы кадра стека
    mov ebp, esp    ; Устанавливаем новый указатель базы кадра стека
    
    ;==========================================
    ; БЛОК ВЫВОДА ВСТУПИТЕЛЬНОГО СООБЩЕНИЯ
    ;==========================================
    push intro_msg    ; Помещаем адрес строки вступительного сообщения в стек
    call printf       ; Вызываем функцию printf для вывода сообщения
    add esp, 4        ; Очищаем стек после вызова функции
    
    ;==========================================
    ; БЛОК ВВОДА ДАННЫХ
    ;==========================================
    ;----------------------------------------
    ; Подблок: Ввод значения x
    ;----------------------------------------
    push prompt_x     ; Помещаем адрес приглашения для x в стек
    call printf       ; Вызываем функцию printf для вывода приглашения
    add esp, 4        ; Очищаем стек после вызова функции
    
    push x            ; Помещаем адрес переменной x в стек
    push format_in    ; Помещаем формат ввода в стек
    call scanf        ; Вызываем функцию scanf для чтения ввода
    add esp, 8        ; Очищаем стек после вызова функции
    
    ; Проверка успешности ввода
    cmp eax, 1        ; Сравниваем возвращаемое значение scanf с 1 (успешное чтение)
    jne input_error   ; Если не равно 1, переходим к обработке ошибки ввода
    
    ;----------------------------------------
    ; Подблок: Ввод значения y
    ;----------------------------------------
    push prompt_y     ; Помещаем адрес приглашения для y в стек
    call printf       ; Вызываем функцию printf для вывода приглашения
    add esp, 4        ; Очищаем стек после вызова функции
    
    push y            ; Помещаем адрес переменной y в стек
    push format_in    ; Помещаем формат ввода в стек
    call scanf        ; Вызываем функцию scanf для чтения ввода
    add esp, 8        ; Очищаем стек после вызова функции
    
    ; Проверка успешности ввода
    cmp eax, 1        ; Сравниваем возвращаемое значение scanf с 1 (успешное чтение)
    jne input_error   ; Если не равно 1, переходим к обработке ошибки ввода
    
    ;----------------------------------------
    ; Подблок: Ввод значения z
    ;----------------------------------------
    push prompt_z     ; Помещаем адрес приглашения для z в стек
    call printf       ; Вызываем функцию printf для вывода приглашения
    add esp, 4        ; Очищаем стек после вызова функции
    
    push z            ; Помещаем адрес переменной z в стек
    push format_in    ; Помещаем формат ввода в стек
    call scanf        ; Вызываем функцию scanf для чтения ввода
    add esp, 8        ; Очищаем стек после вызова функции
    
    ; Проверка успешности ввода
    cmp eax, 1        ; Сравниваем возвращаемое значение scanf с 1 (успешное чтение)
    jne input_error   ; Если не равно 1, переходим к обработке ошибки ввода
    
    ;==========================================
    ; БЛОК ВЫЧИСЛЕНИЙ: Обработка чисел по условию
    ;==========================================
    ; Вычисляем сумму x + y + z
    mov eax, [x]      ; Загружаем значение x в eax
    add eax, [y]      ; Добавляем значение y
    add eax, [z]      ; Добавляем значение z
    
    ; Сравниваем сумму с 1
    cmp eax, 1        ; Сравниваем сумму с 1
    jge sum_not_less_than_one    ; Если сумма >= 1, переходим к другой ветви
    
    ;----------------------------------------
    ; Подблок: Случай когда x + y + z < 1
    ;----------------------------------------
    ; Вычисляем z = 2 * (x - y)
    mov eax, [x]      ; Загружаем значение x в eax
    sub eax, [y]      ; eax = x - y
    add eax, eax      ; eax = 2 * (x - y), умножаем на 2 через сложение
    mov [z], eax      ; z = 2 * (x - y)
    
    ; Выводим результат для случая 1
    push dword [z]    ; Помещаем новое значение z в стек
    push result_case1 ; Помещаем формат сообщения в стек
    call printf       ; Вызываем функцию printf
    add esp, 8        ; Очищаем стек после вызова функции
    
    jmp print_final_values    ; Переходим к выводу итоговых значений
    
    ;----------------------------------------
    ; Подблок: Случай когда x + y + z >= 1
    ;----------------------------------------
sum_not_less_than_one:
    ; Определяем, какое из значений x и y меньше
    mov eax, [x]      ; Загружаем значение x в eax
    cmp eax, [y]      ; Сравниваем x с y
    jle x_is_smaller  ; Если x <= y, переходим на метку x_is_smaller
    
    ;----------------------------------------
    ; Подблок: Случай когда y меньше x
    ;----------------------------------------
    ; Заменяем y на 2 * (x + z)
    mov eax, [x]      ; Загружаем значение x в eax
    add eax, [z]      ; eax = x + z
    add eax, eax      ; eax = 2 * (x + z), умножаем на 2 через сложение
    mov [y], eax      ; y = 2 * (x + z)
    
    ; Выводим результат для случая 2 (y наименьшее)
    push dword [y]    ; Помещаем новое значение y в стек
    push result_case2_y ; Помещаем формат сообщения в стек
    call printf       ; Вызываем функцию printf
    add esp, 8        ; Очищаем стек после вызова функции
    
    jmp print_final_values    ; Переходим к выводу итоговых значений
    
    ;----------------------------------------
    ; Подблок: Случай когда x меньше или равно y
    ;----------------------------------------
x_is_smaller:
    ; Заменяем x на 2 * (y + z)
    mov eax, [y]      ; Загружаем значение y в eax
    add eax, [z]      ; eax = y + z
    add eax, eax      ; eax = 2 * (y + z), умножаем на 2 через сложение
    mov [x], eax      ; x = 2 * (y + z)
    
    ; Выводим результат для случая 2 (x наименьшее)
    push dword [x]    ; Помещаем новое значение x в стек
    push result_case2_x ; Помещаем формат сообщения в стек
    call printf       ; Вызываем функцию printf
    add esp, 8        ; Очищаем стек после вызова функции
    
    ;==========================================
    ; БЛОК ВЫВОДА РЕЗУЛЬТАТА
    ;==========================================
print_final_values:
    ; Выводим итоговые значения x, y, z
    push dword [z]    ; Помещаем значение z в стек
    push dword [y]    ; Помещаем значение y в стек
    push dword [x]    ; Помещаем значение x в стек
    push final_values ; Помещаем формат сообщения в стек
    call printf       ; Вызываем функцию printf
    add esp, 16       ; Очищаем стек после вызова функции (удаляем 4 параметра)
    
    ;==========================================
    ; БЛОК ЗАВЕРШЕНИЯ ПРОГРАММЫ
    ;==========================================
    ; Эпилог функции
    mov esp, ebp      ; Восстанавливаем указатель стека
    pop ebp           ; Восстанавливаем сохраненное значение базового указателя
    xor eax, eax      ; Устанавливаем код возврата 0 (успешное завершение)
    ret               ; Возврат из программы

    ;==========================================
    ; БЛОК ОБРАБОТКИ ОШИБОК
    ; Обрабатывает ошибки ввода
    ;==========================================
input_error:
    ; Вывод сообщения об ошибке
    push error_msg    ; Помещаем адрес сообщения об ошибке в стек
    call printf       ; Вызываем функцию printf для вывода сообщения
    add esp, 4        ; Очищаем стек после вызова функции
    
    ; Эпилог функции с кодом ошибки
    mov esp, ebp      ; Восстанавливаем указатель стека
    pop ebp           ; Восстанавливаем сохраненное значение базового указателя
    mov eax, 1        ; Устанавливаем код возврата 1 (ошибка)
    ret               ; Возврат из программы
